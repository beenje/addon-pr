#!/usr/bin/env python
#
#       Copyright (C) 2012-2013 Team XBMC
#       http://www.xbmc.org
#
#   This Program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2, or (at your option)
#   any later version.
#
#   This Program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; see the file LICENSE.  If not, see
#   <http://www.gnu.org/licenses/>.
#
"""addon-pr

Usage:
    addon-pr [-hif] [--conf=<CONF>] [--mail=<URL> | --filename=<FILE>]
    addon-pr [--conf=<CONF>] --addon_id=<ID> --addon_version=<x.x.x> --url=<URL> --revision=<REVISION> --xbmc_branch=<BRANCH> --pull_type=<TYPE>
    addon-pr --check --xbmc_branch=<BRANCH> <addon_path>

Process XBMC addons pull requests (commit them to the local repo).
By default all e-mails flagged with the label defined in the configuration
file are parsed.
A single e-mail url or a file can be used as input.
The addon id and needed parameters can also be passed on the command line.

The --check option allows to only run the addon check tests on a local
addon directory.

Options:
    --conf=<CONF>            configuration file [default: ~/.addon-pr]
    --mail=<URL>             only process the given e-mail url
    --filename=<FILE>        only process the given file
    --addon_id=<ID>             only pull the given addon
    --addon_version=<x.x.x>  version of the addon to pull
    --url=<URL>              url of the addon to pull
    --revision=<REVISION>    revision or tag of the addon to pull
    --xbmc_branch=<BRANCH>   xbmc branch where to pull the addon
    --pull_type=<TYPE>       pull type (git|svn|hg|zip)
    -h --help                display this help
    --version                show version
    -i --interactive         ask for confirmation
    -f --force               do not abort on errors
    --check                  only check the given local addon path (no pull request)
"""

import logging
from docopt import docopt
from addonpr import pullrequest, addonparser, __version__


def get_options(parameters):
    """Return options set to True or a value (not None)"""
    options = {}
    for param, value in parameters.items():
        if param.startswith('--') and value:
            # Remove '--' from option name
            options[param[2:]] = value
        elif param.startswith('<') and param.endswith('>'):
            if value:
                # Remove '<' '>' from argument name
                options[param[1:-1]] = value
    return options


def main():
    """entry point"""
    logging.basicConfig(format='%(name)-19s - %(levelname)-7s - %(message)s',
            level=logging.INFO)
    parameters = docopt(__doc__, version=__version__)
    options = get_options(parameters)
    if 'check' in options:
        # Run addon check test on the given path
        del options['check']
        del options['conf']
        try:
            addon_check = addonparser.AddonCheck(**options)
        except Exception as e:
            logging.error(e)
        else:
            (warnings, errors) = addon_check.run()
    else:
        # Perform the pull request
        pr = pullrequest.Parser(**options)
        pr.process()


if __name__ == '__main__':
    main()
